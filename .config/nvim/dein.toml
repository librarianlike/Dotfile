[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add='''
    " Lightline設定
	set laststatus=2
	let g:lightline = {
	      \ 'colorscheme': 'codedark',
	      \ 'mode_map': { 'c': 'NORMAL' },
	      \ 'active': {
	      \   'left': [ [ 'mode', 'paste' ], ['fugitive'],
	      \             [ 'cocstatus', 'readonly', 'filename' ] ]
	      \ },
	      \ 'component_function': {
	      \   'modified': 'LightlineModified',
	      \   'readonly': 'LightlineReadonly',
	      \   'fugitive': 'MyFugitive',
	      \   'filename': 'LightlineFilename',
	      \   'fileformat': 'LightlineFileformat',
	      \   'filetype': 'LightlineFiletype',
	      \   'fileencoding': 'LightlineFileencoding',
	      \   'mode': 'LightlineMode'
	      \ },
	      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
	      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
	      \ }
	
	function! LightlineModified()
	  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
	endfunction
	
	function! LightlineReadonly()
	  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? "\u2b64" : ''
	endfunction
	
	function! LightlineFilename()
	  return ('' != LightlineReadonly() ? LightlineReadonly() . '' : '') .
	        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
	        \  &ft == 'unite' ? unite#get_status_string() :
	        \  &ft == 'vimshell' ? vimshell#get_status_string() :
	        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
	        \ ('' != LightlineModified() ? '' . LightlineModified() : '')
	endfunction
	
	function! LightlineFugitive()
	  if &ft !~? 'vimfiler\|gundo' && exists("*fugitive#head")
	    let branch = fugitive#head()
	    return branch !=# '' ? "\u2b60".branch : ''
	  endif
	  return ''
	endfunction
	
	function! LightlineFileformat()
	  return winwidth(0) > 70 ? &fileformat : ''
	endfunction
	
	function! LightlineFiletype()
	  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
	endfunction
	
	function! LightlineFileencoding()
	  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
	endfunction
	
	function! LightlineMode()
	  return winwidth(0) > 60 ? lightline#mode() : ''
	endfunction
	
	function! MyFugitive()
	  try
	    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head') && strlen(fugitive#head())
	      return ' ' . fugitive#head()
	    endif
	  catch
	  endtry
	  return ''
	endfunction
'''

# 矩形選択時に、同時に複数行編集する
[[plugins]]
repo = 'terryma/vim-multiple-cursors'

# 矢印キーを無効化
[[plugins]]
repo = 'modsound/gips-vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add='''
    " <Leader>f{char} to move to {char}
    map  <Leader>g <Plug>(easymotion-bd-f)
    nmap <Leader>g <Plug>(easymotion-overwin-f)
    
    " s{char}{char} to move to {char}{char}
    nmap s <Plug>(easymotion-overwin-f2)
    
    " Move to line
    map <Leader>L <Plug>(easymotion-bd-jk)
    nmap <Leader>L <Plug>(easymotion-overwin-line)
    
    " Move to word
    map  <Leader>w <Plug>(easymotion-bd-w)
    nmap <Leader>w <Plug>(easymotion-overwin-w)
'''

[[plugins]]
repo = 'jeffkreeftmeijer/vim-numbertoggle'

[[plugins]]
repo = 'osyo-manga/vim-operator-search'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
hook_add='''
	map R  <Plug>(operator-replace)
'''

[[plugins]]
repo = 'kana/vim-textobj-function'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-submode'
hook_add='''
	" 分割ページの調整
	call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
	call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
	call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
	call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
	call submode#map('bufmove', 'n', '', '>', '<C-w>>')
	call submode#map('bufmove', 'n', '', '<', '<C-w><')
	call submode#map('bufmove', 'n', '', '+', '<C-w>+')
	call submode#map('bufmove', 'n', '', '-', '<C-w>-')
'''

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'mhinz/vim-startify'

# Gitの編集履歴
# [[plugins]]
# repo = 'mhinz/vim-signify'

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'tomasiser/vim-code-dark'
hook_add = '''
	colorscheme codedark
'''

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-dadbod'

[[plugins]]
repo = 'kristijanhusak/vim-dadbod-ui'

# 区切り文字などの整形
[[plugins]]
repo = 'junegunn/vim-easy-align'
hook_add = '''
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'RRethy/vim-illuminate'
hook_add = '''
    " Time in milliseconds (default 250)
    let g:Illuminate_delay = 500
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
build = 'fzf#install()'

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = '0'
rev = 'release'
build = 'coc#util#install()'
hook_add = '''
    " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
    " delays and poor user experience.
    set updatetime=400
    
    " Don't pass messages to |ins-completion-menu|.
    set shortmess+=c
    
    " Always show the signcolumn, otherwise it would shift the text each time
    " diagnostics appear/become resolved.
    set signcolumn=yes
    
    " Use tab for trigger completion with characters ahead and navigate.
    " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
    " other plugin before putting this into your config.
    inoremap <silent><expr> <TAB>
          \ pumvisible() ? "\<C-n>" :
          \ <SID>check_back_space() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
    
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~# '\s'
    endfunction
    
    " Use <c-space> to trigger completion.
    inoremap <silent><expr> <c-space> coc#refresh()
    
    " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
    " position. Coc only does snippet and additional edit on confirm.
    if exists('*complete_info')
      inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
    else
      imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
    endif
    
    " Use `[g` and `]g` to navigate diagnostics
    nmap <silent> [g <Plug>(coc-diagnostic-prev)
    nmap <silent> ]g <Plug>(coc-diagnostic-next)
    
    " GoTo code navigation.
    nmap <silent> gd <Plug>(coc-definition)
    nmap <silent> gy <Plug>(coc-type-definition)
    nmap <silent> gi <Plug>(coc-implementation)
    nmap <silent> gr <Plug>(coc-references)
    
    " Use K to show documentation in preview window.
    nnoremap <silent> K :call <SID>show_documentation()<CR>
    
    function! s:show_documentation()
      if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
      else
        call CocAction('doHover')
      endif
    endfunction
    
    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')
    
    " Symbol renaming.
    nmap <leader>rn <Plug>(coc-rename)
    
    " Formatting selected code.
    xmap <leader>f  <Plug>(coc-format-selected)
    nmap <leader>f  <Plug>(coc-format-selected)
    
    augroup mygroup
      autocmd!
      " Setup formatexpr specified filetype(s).
      autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder.
      autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
    augroup end
    
    " Applying codeAction to the selected region.
    " Example: `<leader>aap` for current paragraph
    xmap <leader>a  <Plug>(coc-codeaction-selected)
    nmap <leader>a  <Plug>(coc-codeaction-selected)
    
    " Remap keys for applying codeAction to the current line.
    nmap <leader>ac  <Plug>(coc-codeaction)
    " Apply AutoFix to problem on the current line.
    nmap <leader>qf  <Plug>(coc-fix-current)
    
    " Introduce function text object
    " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
    xmap if <Plug>(coc-funcobj-i)
    xmap af <Plug>(coc-funcobj-a)
    omap if <Plug>(coc-funcobj-i)
    omap af <Plug>(coc-funcobj-a)
    
    " Use <TAB> for selections ranges.
    " NOTE: Requires 'textDocument/selectionRange' support from the language server.
    " coc-tsserver, coc-python are the examples of servers that support it.
    nmap <silent> <TAB> <Plug>(coc-range-select)
    xmap <silent> <TAB> <Plug>(coc-range-select)
    
    " Add `:Format` command to format current buffer.
    command! -nargs=0 Format :call CocAction('format')
    
    " Add `:Fold` command to fold current buffer.
    command! -nargs=? Fold :call     CocAction('fold', <f-args>)
    
    " Add `:OR` command for organize imports of the current buffer.
    command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

'''
